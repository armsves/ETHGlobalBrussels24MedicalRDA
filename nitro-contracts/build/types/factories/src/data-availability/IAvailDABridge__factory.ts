/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IAvailDABridge,
  IAvailDABridgeInterface,
} from "../../../src/data-availability/IAvailDABridge";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32[]",
            name: "dataRootProof",
            type: "bytes32[]",
          },
          {
            internalType: "bytes32[]",
            name: "leafProof",
            type: "bytes32[]",
          },
          {
            internalType: "bytes32",
            name: "rangeHash",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "dataRootIndex",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "blobRoot",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "bridgeRoot",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "leaf",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "leafIndex",
            type: "uint256",
          },
        ],
        internalType: "struct MerkleProofInput",
        name: "input",
        type: "tuple",
      },
    ],
    name: "verifyBlobLeaf",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

export class IAvailDABridge__factory {
  static readonly abi = _abi;
  static createInterface(): IAvailDABridgeInterface {
    return new utils.Interface(_abi) as IAvailDABridgeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IAvailDABridge {
    return new Contract(address, _abi, signerOrProvider) as IAvailDABridge;
  }
}
